---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { ButtonElement } from "~/types/webComponents";
import Loader from "~/components/Loader.astro";

type Props<Tag extends HTMLTag = "button"> = Polymorphic<{
  as: Tag;
  size?: "sm" | "md";
  loading?: boolean;
  selector?: string;
}>;

const {
  as: Tag = "button",
  class: className,
  size = "md",
  loading: initialLoading = false,
  selector,
  ...props
} = Astro.props;

export function getElement(selector?: string): ButtonElement {
  const querySelector =
    "button-wc" + (selector ? `[data-selector="${selector}"]` : "");
  return document.querySelector(querySelector)! as ButtonElement;
}
export function getElements(selector?: string): NodeListOf<ButtonElement> {
  const querySelector =
    "button-wc" + (selector ? `[data-selector="${selector}"]` : "");
  return document.querySelectorAll(querySelector);
}
---

<button-wc data-selector={selector}>
  <Tag
    {...props}
    data-root
    disabled={initialLoading}
    aria-disabled={initialLoading}
    data-loading={initialLoading}
    class:list={[
      "border-primary text-primary before:bg-primary after:bg-primary group relative block overflow-hidden border bg-white shadow-2xl transition-all before:absolute before:left-0 before:top-0 before:h-0 before:w-1/4 before:duration-500 after:absolute after:bottom-0 after:right-0 after:h-0 after:w-1/4 after:duration-500 hover:cursor-pointer hover:text-white hover:before:h-full hover:after:h-full disabled:pointer-events-none disabled:opacity-50",
      {
        "w-25 min-h-[30px]": size === "sm",
        "min-h-[50px] w-40": size === "md",
      },
      className,
    ]}
  >
    <span
      data-animation
      class="before:bg-primary after:bg-primary top-0 flex h-full w-full items-center justify-center before:absolute before:bottom-0 before:left-1/4 before:z-0 before:h-0 before:w-1/4 before:duration-500 after:absolute after:right-1/4 after:top-0 after:z-0 after:h-0 after:w-1/4 after:duration-500 hover:text-white group-hover:before:h-full group-hover:after:h-full"
    ></span>
    <span
      class="absolute bottom-0 left-0 right-0 top-0 z-10 flex h-full w-full items-center justify-center group-hover:text-white"
    >
      <span data-content>
        <slot />
      </span>
    </span>
    <Loader data-loader class="hidden" />
  </Tag>
</button-wc>

<script>
  class ButtonElement extends HTMLElement {
    root: HTMLElement;
    animation: HTMLSpanElement;
    contentContainer: HTMLSpanElement;
    content: Node[];
    loader: SVGElement;

    constructor() {
      super();

      this.root = this.querySelector<HTMLElement>("[data-root]")!;
      this.animation = this.querySelector<HTMLSpanElement>("[data-animation]")!;
      this.contentContainer =
        this.querySelector<HTMLSpanElement>("[data-content]")!;
      this.content = Array.from(
        this.contentContainer!.cloneNode(true).childNodes,
      );
      this.loader = this.querySelector("[data-loader]")!.cloneNode(
        true,
      ) as SVGElement;
    }

    connectedCallback() {
      this.loading = this.root.getAttribute("data-loading") === "true";
      this.loader.classList.toggle("hidden", false);
    }

    set loading(value: boolean) {
      if (value) {
        this.root.setAttribute("disabled", "true");
        this.root.setAttribute("aria-disabled", "true");
        this.contentContainer.innerHTML = "";
        this.contentContainer.appendChild(this.loader);
      } else {
        this.root.removeAttribute("disabled");
        this.root.removeAttribute("aria-disabled");
        this.contentContainer.innerHTML = "";
        this.content.forEach((item) => this.contentContainer.appendChild(item));
      }
    }

    get loading() {
      return this.hasAttribute("loading");
    }

    toggleLoading(val: boolean) {
      this.loading = val;
    }
  }

  if (!customElements.get("button-wc")) {
    customElements.define("button-wc", ButtonElement);
  }
</script>
