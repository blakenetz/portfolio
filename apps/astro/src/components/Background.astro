<div id="background" class="inset absolute"></div>
<script>
  import Konva from "konva";

  /**
   * @see {@link file://./../styles/global.css} for color variables
   */
  const colors = [
    "rich-black",
    "rose",
    "pumpkin",
    "papaya-whip",
    "dodger-blue",
  ].map((color) =>
    getComputedStyle(document.documentElement).getPropertyValue(
      `--color-${color}`
    )
  );

  function generateRandomPoints(index: number) {
    const length = 8;
    const radius = 50 * Math.pow(1.5, index + 1);
    const variance = radius * 0.3;

    return Array.from({ length }, (_, i) => {
      const angle = (i * 2 * Math.PI) / length;
      const r = radius + (Math.random() - 0.5) * variance;
      return [Math.cos(angle) * r, Math.sin(angle) * r];
    }).flat();
  }

  const stage = new Konva.Stage({
    container: "background",
    width: window.innerWidth,
    height: window.innerHeight,
  });

  const layer = new Konva.Layer();
  stage.add(layer);

  const blobs: { node: Konva.Line; tween: Konva.Tween }[] = colors.map(
    (fill, i) => {
      const node = new Konva.Line({
        points: generateRandomPoints(i),
        fill,
        stroke: "black",
        strokeWidth: 5,
        closed: true,
        tension: 0.3,
        offsetX: stage.width() / 2,
        offsetY: stage.height() / 2,
        x: stage.width() * 0.66,
        y: stage.height() * 0.33,
      });

      return {
        node,
        tween: new Konva.Tween({
          node,
          duration: 0.5,
          x: node.x(),
          y: node.y(),
          easing: Konva.Easings.EaseOut,
        }),
      };
    }
  );

  // add blobs in reverse order to make them appear on top of each other
  blobs.reverse().forEach(({ node }) => layer.add(node));

  const period = 2000;
  let baseScale = 1;

  const anim = new Konva.Animation((frame) => {
    if (!frame) return;
    // Add slow expansion to the base scale (0.1 size increase per second)
    baseScale += frame.timeDiff / 10000;
    // Combine base expansion with the sine wave animation
    const sineWave = Math.sin((frame.time * 2 * Math.PI) / period) * 0.1;
    const scale = baseScale + sineWave;
    blobs.forEach(({ node }) => node.scale({ x: scale, y: scale }));
  }, layer);

  anim.start();

  window.addEventListener("resize", () => {
    stage.width(window.innerWidth);
    stage.height(window.innerHeight);
    stage.draw();
  });

  window.addEventListener("mousemove", (e) => {
    stage.setPointersPositions(e);
    const pos = stage.getPointerPosition();
    if (!pos) return;

    blobs.forEach(({ node, tween }) => {
      tween.node.to({
        x: pos.x + node.offsetX(),
        y: pos.y + node.offsetY(),
      });
    });
  });
</script>
