---
export const prerender = false;

import GitForkIcon from "@tabler/icons/outline/git-fork.svg";
import UserCircleIcon from "@tabler/icons/outline/user-circle.svg";
import { actions } from "astro:actions";
import Divider from "~/components/Divider.astro";
import Link from "~/components/Link.astro";
import CodeLanguage from "~/components/projects/CodeLanguage.astro";
import Grid from "~/components/projects/Grid.astro";
import GridItem from "~/components/projects/GridItem.astro";

import type { RepoData } from "~/types/projects";
import Button from "~/components/Button.astro";
interface Props {
  data: RepoData;
  name: "personal" | "work";
}

const { data, name } = Astro.props;

// const result = Astro.getActionResult(actions.sortGithubProjects);
// console.log("action results", result, result?.data, result?.error);
---

<form method="GET" action={actions.sortGithubProjects}>
  <Grid>
    {
      data.map((repo, index) => (
        <GridItem index={index} class="justify-between">
          <div class="flex items-center gap-2">
            <div class="flex items-center gap-2 font-bold">
              {repo.fork && <GitForkIcon class="h-4 w-4" />}
              <span class="font-barrio">{repo.name}</span>
            </div>
          </div>
          {repo.description && <p class="text-sm">{repo.description}</p>}
          <div class="flex flex-col gap-2">
            <div class="flex items-center gap-2 text-sm">
              <Link href={repo.html_url}>View on Github</Link>
              {repo.user && (
                <>
                  <Divider />
                  <Link
                    class="flex flex-row items-center gap-1"
                    href={`https://github.com/${repo.user}`}
                  >
                    <UserCircleIcon class="h-4 w-4" />
                    <span>{repo.user}</span>
                  </Link>
                </>
              )}
            </div>
            <div class="flex w-full flex-col items-center justify-between gap-1 text-xs md:flex-row">
              {repo.language && (
                <>
                  <CodeLanguage language={repo.language} />
                  <Divider />
                </>
              )}

              <p>{`Created ${repo.created_at}`}</p>
              <Divider />
              <p>{`Updated ${repo.updated_at}`}</p>
            </div>
          </div>
        </GridItem>
      ))
    }
  </Grid>
  <div class="flex items-center justify-end gap-1 py-2">
    <span class="font-barrio mr-2 text-sm">Sort</span>
    <Button size="sm" type="button" data-sort="created">Created</Button>
    <Button size="sm" type="button" data-sort="updated">Updated</Button>
  </div>
  <input type="hidden" name={`${name}-sort`} value="created" />
</form>

<script>
  import { getSortButtons } from "~/components/SortControls.astro";

  let form: HTMLFormElement | null = null;
  let input: HTMLInputElement | null = null;

  // in place sort
  function initializeSortHandler() {
    const sortButtons = getSortButtons();

    sortButtons.forEach((button) => {
      button.addEventListener(
        "click",
        async function (this: HTMLButtonElement) {
          const direction = this.dataset.sort!;
          if (!form) form = this.closest<HTMLFormElement>("form");
          if (!input)
            input =
              form?.querySelector<HTMLInputElement>(`input[type="hidden"]`)!;

          if (!form || !input) {
            console.error("form or input not found");
            return;
          }

          input.value = direction;
          form.submit();
        },
      );
    });
  }

  document.addEventListener("astro:page-load", initializeSortHandler);
  initializeSortHandler();
</script>
