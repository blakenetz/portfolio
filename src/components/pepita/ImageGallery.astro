---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import DogFallback from "~/assets/home/dog-cosmos.svg";

type ImageComponent = () => Promise<{ default: ImageMetadata }>;

const images = Object.values(
  import.meta.glob<{
    default: ImageMetadata;
  }>("/src/assets/pepita/gallery/*.{jpg,jpeg,png}"),
).reduce<ImageComponent[][]>((acc, item, i) => {
  if (i % 2 === 0) acc.push([]);
  acc[acc.length - 1].push(item);
  return acc;
}, []);
---

{
  images.map((column) => (
    <div class="grid gap-2">
      {column.map((image) => (
        <div class="relative aspect-auto overflow-hidden rounded-sm">
          <Image
            src={image()}
            alt=""
            class="h-full w-full rounded-sm object-cover"
          />
          <span
            class="bg-dodger-blue/50 font-barriecito absolute inset-0 flex h-full w-full animate-pulse flex-col items-center justify-center gap-2 p-1 text-2xl"
            data-placeholder
          >
            <DogFallback class="hidden h-12 w-12" />
            <p class="font-barriecito hidden text-sm">Unable to load image</p>
          </span>
        </div>
      ))}
    </div>
  ))
}

<script>
  function getTarget(arg: Event | HTMLImageElement): HTMLElement | null {
    if (arg instanceof HTMLImageElement) return arg;
    if (arg.currentTarget instanceof HTMLElement) {
      return arg.currentTarget;
    }

    return null;
  }

  function getSibling(arg: Event | HTMLImageElement): HTMLElement | null {
    const target = getTarget(arg);
    if (target) {
      const sibling = target.nextSibling;
      if (
        sibling instanceof HTMLElement &&
        sibling.hasAttribute("data-placeholder")
      ) {
        return sibling;
      }
    }
    return null;
  }

  function initializeImageHandler() {
    const images = document.querySelectorAll("img");
    images.forEach((image) => {
      if (image.complete) {
        const sibling = getSibling(image);
        if (sibling) sibling.remove();
      } else {
        image.addEventListener("load", (e) => {
          const sibling = getSibling(e);
          if (sibling) sibling.remove();
        });
      }

      image.addEventListener("error", (e) => {
        const target = getTarget(e);
        const sibling = getSibling(e);
        if (target) target.style.setProperty("visibility", "hidden");
        if (sibling) {
          sibling.classList.remove("animate-pulse");
          Array.from(sibling.children).forEach((child) => {
            child.classList.remove("hidden");
          });
        }
      });
    });
  }

  document.addEventListener("astro:page-load", initializeImageHandler);
  initializeImageHandler();
</script>
