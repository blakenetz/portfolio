---
import type { HTMLAttributes } from "astro/types";
interface Props extends HTMLAttributes<"div"> {
  index: number;
}

const { index, ...props } = Astro.props;

const gradientDirections = [
  "bg-gradient-to-br",
  "bg-gradient-to-tr",
  "bg-gradient-to-bl",
  "bg-gradient-to-tl",
  "bg-gradient-to-r",
  "bg-gradient-to-l",
];

function getRandomGradientDirection() {
  return gradientDirections[
    Math.floor(Math.random() * gradientDirections.length)
  ];
}

function getGridPattern(index: number, columns: number) {
  const row = Math.floor(index / columns);
  const isEventRow = row % 2 === 0;
  const position = index % columns;

  if (columns === 2) return isEventRow ? position === 0 : position === 1;
  if (columns === 3)
    return isEventRow ? [0, 2].includes(position) : position === 1;
  if (columns === 4)
    return isEventRow ? [0, 2].includes(position) : [1, 3].includes(position);
}
---

<div
  class:list={[
    "group relative rounded-sm",
    {
      // Base 2-column pattern (mobile)
      "bg-white": getGridPattern(index, 2),
      // 3-column pattern (md)
      "md:bg-transparent": true,
      "md:bg-white": getGridPattern(index, 3),
      // 4-column pattern (lg)
      "lg:bg-transparent": true,
      "lg:bg-white": getGridPattern(index, 4),
    },
  ]}
>
  <div
    class:list={[
      "invisible group-hover:visible",
      "from-sunglow via-aquamarine to-dodger-blue-300 absolute -inset-1 rounded-2xl opacity-70 blur-2xl filter",
      getRandomGradientDirection(),
    ]}
  >
  </div>
  <div
    class:list={["relative flex h-full flex-col gap-4 p-4", props?.class]}
    {...props}
  >
    <slot />
  </div>
</div>
